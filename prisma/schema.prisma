generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  addressLineOne String?
  addressLineTwo String?
  age            String?
  city           String?
  postcode       String?
  role           UserRole    @default(DOG_OWNER)
  status         String?
  country        CountryRole @default(United_Kingdom)
  accounts       Account[]
  sessions       Session[]
  pet            Pet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  breed     String?
  sex       String?
  age       String?
  weight    String?
  image     String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum UserRole {
  DOG_OWNER
  DOG_TRAINER
  DOG_SITTER
  FOOD_SUPPLIER
  DOG_BREEDER
}

enum CountryRole {
  United_Kingdom
  United_States
  Canada
  Mexico
}
